include required(classpath("application"))

backend {
  
  # Override the default backend.
  default = "LocalWithDocker"

  # The list of providers.
  providers {

    # The local provider is included by default in the reference.conf. This is an example.

    # Define a new backend provider.
    LocalWithDocker {
      # The actor that runs the backend. In this case, it's the Shared File System (SFS) ConfigBackend.
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      # The backend custom configuration.
      config {

        # Optional limits on the number of concurrent jobs
        concurrent-job-limit = 1
        run-in-background = true


        # The list of possible runtime custom attributes.
        runtime-attributes = """
        String? docker
        String? docker_user
        Int? cpu
        String? memory
        String? requested_memory
        String? docker_volume
        """

        # Submit string when there is no "docker" runtime attribute.
        submit = "/usr/bin/env bash ${script}"

        # Submit string when there is a "docker" runtime attribute.
        submit-docker = """
        docker run \
          --cidfile ${docker_cid} \
          --rm -i \
          ${"--cpus=" + cpu} \
          ${"--memory=" + requested_memory} \
          ${"--user " + docker_user} \
          ${"--volume " + docker_volume + ":" + docker_volume} \
          --entrypoint ${job_shell} \
          -v ${cwd}:${docker_cwd} \
          ${docker} ${docker_script}
        """
        filesystems {
          local {
            localization: [ "soft-link", "hard-link", "copy" ]
            caching {
              duplication-strategy: [ "soft-link", "hard-link", "copy" ]
              # Possible values: file, path, path+modtime
              # "file" will compute an md5 hash of the file content.
              # "path" will compute an md5 hash of the file path. This strategy will only be effective if the duplication-strategy (above) is set to "soft-link",
              # in order to allow for the original file path to be hashed.
              # "path+modtime" will compute an md5 hash of the file path and the last modified time. The same conditions as for "path" apply here.
              # Default: file
              hashing-strategy: "path+modtime"
              #hashing-strategy: "file"
              # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
              # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
              check-sibling-md5: true
            }  
          }
        }
      }
    }
  }
}